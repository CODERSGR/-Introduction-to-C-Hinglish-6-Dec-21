Code Binary Search
Send Feedback
You have been given a sorted(in ascending order) integer array/list(ARR) of size N and an element X. Write a function to search this element in the given input array/list using 'Binary Search'. Return the index of the element in the input array/list. In case the element is not present in the array/list, then return -1.
Input format :
The first line contains an Integer 'N' which denotes the size of the array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.

Third line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow..

All the 't' lines henceforth, will take the value of X to be searched for in the array/list.
Output Format :
For each test case, print the index at which X is present, -1 otherwise.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^4
0 <= N <= 10^6
0 <= X <= 10^9
Time Limit: 1 sec
Sample Input 1:
7
1 3 7 9 11 12 45
1
3
Sample Output 1:
1
Sample Input 2:
7
1 2 3 4 5 6 7
2
9
7
Sample Output 2:
-1
6




/*************************************************** SOLUTION *************************************************************************/


/***************************************************MAIN CODE *************************************************************************/


#include <iostream>
using namespace std;

#include "solution.h"

int main()
{

	int size;
	cin >> size;
	int *input = new int[size];

	for(int i = 0; i < size; ++i)
	{
		cin >> input[i];
	}
	
	int t;
	cin >> t;

	while (t--)
	{
		int val;
		cin >> val;
		cout << binarySearch(input, size, val) << endl;
	}
	
	delete [] input;
	return 0;
}

/***************************************************YOUR CODE*************************************************************************/

int binarySearch(int *input, int n, int val)
{
     int start=0,end=n-1;
    while(start<=end){
        int mid=(start+end)/2;
        if(input[mid]==val)
            return mid;
        else if(input[mid]>val)
            end=mid-1;
        else
            start=mid+1;
    }
    return -1;//Write your code here
}

/***************************************************EDITORIAL SOLUTION *************************************************************************/


Binary Search 
Problem Description:​ ​Given a sorted integer array (in ascending order) and an
element x. You need to search this element x in the given input array using
binary search. Return the index of element in the input. If element is not found in
the array, return -1.
Sample Input:
8
1 3 5 6 8 10 14 17
6
Sample Output:
 ​3
How to approach?
Since the array is sorted (in increasing order), we can directly go to the middle element,
compare it with the element we wish to find (x in this case) and then do the following.
1. If middle element is equal to x, return that element’s index.
2. If middle element is less than x, we’ll do the search in the right half of the array.
3. If middle element is more than x, we’ll do the search in the left half of the array.
To implement this approach, we’ll maintain the two pointers; start and end. Initially
start would point to the first element of array, and end would point to the last element
of the array.
We’ll find the middle index by doing ​(start+end)/2 and assigning it to an element
called mid. Then, we’ll begin the search. First we’ll compare ​arr[mid] with x. Three
scenarios will arise:
1. arr[mid] = x -> This means we’ve found the element and we can return
mid straight away.
2. arr[mid] < x -> This means that the element will not exist in the left half of
the array, and may exist in the right half so we’ll update start to mid+1 and
continue the search
3. arr[mid] > x -> This means that the element will not exist in the right half
of the array, and may exist in the left half so we’ll update end to mid-1 and
continue the search
The pseudo-code for this approach is shown on the next page.
function binarySearch(arr, x):
start <- 0
end <- arr.size - 1
while(start <= end):
mid <- (start + end)/2
if (arr[mid] = x):
return mid
else if (arr[mid] < x):
start <- mid + 1
else:
end <- mid - 1
return -1
