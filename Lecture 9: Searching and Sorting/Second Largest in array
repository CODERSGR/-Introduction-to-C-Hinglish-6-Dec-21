Second Largest in array
Send Feedback
You have been given a random integer array/list(ARR) of size N. You are required to find and return the second largest element present in the array/list.
If N <= 1 or all the elements are same in the array/list then return -2147483648 or -2 ^ 31(It is the smallest value for the range of Integer)
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains an integer 'N' representing the size of the array/list.

The second line contains 'N' single space separated integers representing the elements in the array/list.
Output Format :
For each test case, print the second largest in the array/list if exists, -2147483648 otherwise.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^5

Time Limit: 1 sec
Sample Input 1:
1
7
2 13 4 1 3 6 28
Sample Output 1:
13
Sample Input 2:
1
5
9 3 6 2 9
Sample Output 2:
6
Sample Input 3:
2
2
6 6
4
90 8 90 5
Sample Output 3:
-2147483648
8

/*************************************************** SOLUTION *************************************************************************/


/***************************************************MAIN CODE *************************************************************************/


#include <iostream>
using namespace std;

#include "solution.h"

int main()
{
	int t;
	cin >> t;
	while (t--)
	{

		int size;
		cin >> size;
		int *input = new int[size];

		for (int i = 0; i < size; i++)
		{
			cin >> input[i];
		}

		cout << findSecondLargest(input, size) << endl;

		delete[] input;
	}

	return 0;
}


/***************************************************YOUR CODE*************************************************************************/




    #include<limits.h>
int findSecondLargest(int *input, int n)
{ 
    int i,max=INT_MIN,smax=INT_MIN;
    for(i=0;i<n;i++)
{
    if(input[i]>max)
    {   smax=max;
        max=input[i];
    }
        else
            if(input[i]>smax&&input[i]<max)
            {
                smax=input[i];
            }

}
return smax;
    
}
    //Write your code here


/***************************************************EDITORIAL SOLUTION *************************************************************************/


Second Largest in an array
Problem Description:
You are given an array of integers and you have to find the second largest element present in the
given array.
Approach 1: The simplest solution of doing this problem is to sort the array in descending order
and return the second element, or sort in ascending order and return the 2nd element from last.
But, this won’t work in case of duplicate elements.
Time Complexity: Time complexity of this approach is O(nlogn) for sorting an array.
Approach 2:In this approach, you can find the largest element present in the array. So, to find
the largest element let us say largest is minus infinity initially, now scan the whole array once, if
a particular element is greater than the largest then update the largest element to that element.
Then make a second scan to find an element just smaller than the largest element.
Time complexity: Time complexity of this approach is O(n) for scanning n elements of an array.
But instead of doing 2 scans, we can find the second largest element in just one scan only. To
find the element in a single scan we will move to the next approach.
Approach 3: This is an efficient solution to find the second largest element in a single scan. In
this approach we will maintain both maximum and second maximum elements with us at a time
and will continue to update both by scanning the array only once.
Steps to proceed:
1. Initialize 2 variables as INT_MIN (minus infinity) initially.
maxx = secmax = INT_MIN
maxx=minus_infinity
secmax=minus_infinity
2. If there are less than 2 elements in the array then there will be no second largest, then just
return INT_MIN.
 If n is less than 2:
return minus_infinity
3. Start traversing the array,
 a) If the current element in array say arr[i] is greater than the maxx. Then update maxx
and secmax as,
 secmax = maxx
 maxx = arr[i]
 b) If the current element is in between maxx and secmax, then update secmax to store
the value of current variable as
 secmax = arr[i]
For i=0 to i less than n:
 If input[i]>maxx:
 secmax=maxx
 maxx=input[i]
 Else if input[i]> secmax and input[i] not equal to maxx:
 secmax=input[i]
4. Return the value stored in secmaxx.
Return secmax
Time Complexity: The time complexity of this approach is O(n) as we have to traverse
the whole array once.
❏ Let us see this approach with an example :-
arr={1,5,3,6,7}
● maxx = secmax = INT_MIN
● Now, arr[0]>maxx, then maxx=arr[0]=1
 secmax=INT_MIN
● arr[1]>maxx, then secmax=maxx=1
 maxx=arr[1]=5
● secmax<arr[2]<maxx, then maxx=5
 secmax=3
● arr[3]>maxx, then secmax=maxx=5
 maxx=arr[3]=6
● arr[4]>maxx, then secmax=maxx=6
 maxx=arr[4]=7
● Return secmax=6 which is the 2nd largest element present in the array
