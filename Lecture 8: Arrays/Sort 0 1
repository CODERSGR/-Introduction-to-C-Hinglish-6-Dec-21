Sort 0 1
Send Feedback
You have been given an integer array/list(ARR) of size N that contains only integers, 0 and 1. Write a function to sort this array/list. Think of a solution which scans the array/list only once and don't require use of an extra array/list.
Note:
You need to change in the given array/list itself. Hence, no need to return or print anything. 
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers(all 0s and 1s) representing the elements in the array/list.
Output format :
For each test case, print the sorted array/list elements in a row separated by a single space.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^5
Time Limit: 1 sec
Sample Input 1:
1
7
0 1 1 0 1 0 1
Sample Output 1:
0 0 0 1 1 1 1
Sample Input 2:
2
8
1 0 1 1 0 1 0 1
5
0 1 0 1 0
Sample Output 2:
0 0 0 1 1 1 1 1
0 0 0 1 1 



/*************************************************** SOLUTION *************************************************************************/


/***************************************************MAIN CODE *************************************************************************/

#include <iostream>
#include <algorithm>
using namespace std;

#include "solution.h"

int main()
{

	int t;
	cin >> t;

	while (t--)
	{
		int size;

		cin >> size;
		int *input = new int[size];

		for (int i = 0; i < size; ++i)
		{
			cin >> input[i];
		}

		sortZeroesAndOne(input, size);

		for (int i = 0; i < size; ++i)
		{
			cout << input[i] << " ";
		}

		cout << endl;
		delete[] input;
	}

	return 0;
}


/***************************************************YOUR CODE*************************************************************************/

void sortZeroesAndOne(int *input, int size)
{
    //Write your code here
    int i = 0, temp;
    int j = size - 1;
     
    while(i < j)					// pointer i moves left to right and j moves right to left
    {
        if(input[i] == 1)			// i found a '1' 
        {
            temp = input[j];
  			input[j] = input[i];
  			input[i] = temp;		// the '1' got pushed to the right
            j--;					// j collects all the '1's to the right
        }
        else						// i = 0
        	i++;					// move forward and find '1'
    }
}

/***************************************************EDITORIAL SOLUTION *************************************************************************/


Sort 0 1 
Problem Description:​ ​You are given an integer array A that contains only integers 0
and 1. Write a function to sort this array. Find a solution which scans the array
only once. Don't use extra array.
Sample Input:
10
0 1 1 0 1 0 0 1 0 0
Sample Output:
 ​0 0 0 0 0 0 1 1 1 1
How to approach?
There’s a lot of ways to solve this problem. We could use any of the sorting algorithms
to do the job or we could use two variables to store the frequency of 0s and 1s and then
reiterate the array to fill the array according to the frequencies.
Now all these approaches either scan the array more than one time or use an extra
array.
We are looking for a solution that scan the array only once and has a constant space
complexity.
Before we get into the approach, let’s think about what we want to achieve. We want to
push all 0s towards the front of the array and all 1s towards the end of array.
Let’s use two pointers. One that iterates through the array and one that decides the next
location for a 0 that we may encounter while iterating through the array
The algorithm will look something like this:
1. Keep two pointers ‘zeroPos’ for the next location of a 0, and ‘current’ for the
current element that we’re iterating through. Both of them will be initialised to 0
2. Start iterating through the array. If we encounter a 1, we’ll do nothing. Just
increase ‘current’ by 1. If we counter a 0, we need to push this zero to the front of
the array. More specifically, we need to send this zero to zeroPos and bring
zeroPos’ element to the current location. So basically we do
swap(arr[zeroPos], arr[current]). And then we increase ‘current’ by 1
and​ increase ‘zeroPos’ by 1 too.
The pseudo-code for this approach is shown on the next page.
function sort01(arr):
zeroPos <- 0
current <- 0
while(current < arr.size):
if(arr[current] = 0):
swap(arr[current], arr[zeroPos])
zeroPos <- zeroPos + 1
current <- current + 1
